{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/gridAlgorithms.js","PathfindingVisualizer/Navbar/Navbar.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getUnvisitedNeighbors","isWeighted","previousNode","prepareGrid","width","height","walls","nodeLeft","nodeRight","nodeTop","nodeBottom","newGrid","Navbar","selectedAlgorithm","btnErrorMessage","type","document","getElementById","classList","toggle","remove","visualizeAlgorithm","setState","generateGrid","visualizeDijkstra","generateSidewinderGrid","clearGrid","onClick","handlePopout","runVisualizer","isMouseDown","PathfindingVisualizer","mouseIsPressed","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","algoType","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","console","log","getInitialGrid","setMouseState","getNewGridWithWallToggled","clearNewGrid","gridType","randomChoice","Math","ceil","random","generateSimpleGrid","GRID_WIDTH","GRID_HEIGHT","animateWalls","setStart","selectedColumn","updatedGrid","getGrid","map","rowInd","key","nodeInd","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6eec17b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Node.css'\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isVisited,\r\n            row,\r\n        } = this.props;\r\n        const extraClassName = isFinish ? 'node-finish' :\r\n                               isStart ?  'node-start':\r\n                               isWall ? 'node-wall' :\r\n                               isVisited ? 'node-visited' : '';\r\n        //console.log(isVisited, extraClassName);\r\n        \r\n\r\n        return (\r\n            <div id={`node-${row}-${col}`}\r\n                 className={ `node ${ extraClassName }` }\r\n                 onMouseDown={ () => onMouseDown(row, col) }\r\n                 onMouseEnter={ () => onMouseEnter(row, col) }\r\n                 onMouseUp={ () => onMouseUp() }>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n        return false;\r\n    }\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // We skip the walls\r\n        if (closestNode.isWall) continue;\r\n        if (closestNode.distance === Infinity) \r\n            return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) \r\n            return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const neighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of neighbors) {\r\n        neighbor.distance = node.distance + 1 +  neighbor.isWeighted * 10;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) \r\n        for (const node of row) \r\n            nodes.push(node);\r\n    return nodes;\r\n}\r\n\r\n// Checking the shortest path\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","export function generateSimpleGrid(grid, width, height) {\r\n    // Array for visualizing the creation of walls\r\n    //let walls = []\r\n\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;  \r\n\r\n    // Create random paths between cells\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            const randomChoice = Math.ceil(Math.random() * 10) % 2; \r\n            // 0 for top, 1 for right\r\n            if (row === 1 && col === width - 1) \r\n                continue;\r\n            if (row === 1 || randomChoice && col !== width - 1) {\r\n                const node = grid[row][col + 1];\r\n                node.isWall = false;\r\n                grid[row][col + 1] = node;\r\n                // walls.push(grid[row - 1][col]);\r\n            } else {\r\n                const node = grid[row - 1][col];\r\n                node.isWall = false;\r\n                grid[row - 1][col] = node;\r\n                // walls.push(grid[row][col + 1]);\r\n            }\r\n        }\r\n    }\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nexport function generateSidewinderGrid(grid, width, height) {\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;\r\n\r\n    let setStart = 1;\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            if (row !== 1) {\r\n                const randomChoice = Math.ceil(Math.random() * 10) % 2; // 0 or 1 only\r\n                if (!randomChoice && col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n                else {\r\n                    let selectedColumn = Math.ceil(Math.random() * (setStart - col + 1)) + col - 1;\r\n                    selectedColumn += selectedColumn % 2 === 0;\r\n                    console.log(selectedColumn);\r\n                    \r\n                    grid[row - 1][selectedColumn].isWall = false;\r\n\r\n                    if (col !== width - 1) \r\n                        setStart = col + 1;\r\n                    else \r\n                        setStart = 1;\r\n                }\r\n            } else {\r\n                if (col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nfunction prepareGrid(grid, width, height) {\r\n    let walls = [];\r\n\r\n    // Set walls around the grid\r\n    for (let row = 0; row <= height; row++) { \r\n        const nodeLeft = grid[row][0],\r\n            nodeRight = grid[row][width];\r\n        nodeLeft.isWall = true;\r\n        nodeRight.isWall = true;\r\n        grid[row][0] = nodeLeft;\r\n        grid[row][width] = nodeRight;\r\n        walls.push(grid[row][0]);\r\n        walls.push(grid[row][width]);\r\n    }\r\n    for (let col = 0; col <= width; col++) { \r\n        const nodeTop = grid[0][col],\r\n            nodeBottom = grid[height][col];\r\n        nodeTop.isWall = true;\r\n        nodeBottom.isWall = true;\r\n        grid[0][col] = nodeTop;\r\n        grid[height][col] = nodeBottom;\r\n        walls.push(grid[0][col]);\r\n        walls.push(grid[height][col]);\r\n    }\r\n\r\n    // Set all even cols and rows\r\n    for (let row = 2; row <= height; row += 2) \r\n        for (let col = 1; col <= width; col++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    for (let col = 2; col <= width; col += 2) \r\n        for (let row = 1; row <= height; row++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    \r\n    return { newGrid: grid, walls: walls };\r\n}","import React, { Component } from 'react'\r\n\r\nimport './Navbar.css'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedAlgorithm: '',\r\n            btnErrorMessage: ''\r\n        }\r\n    }\r\n\r\n    handlePopout(type) {\r\n        document.getElementById(`${ type }-popout`).classList.toggle(\"active\");\r\n        document.getElementById(`${ type }-btn`).classList.toggle(\"active\");\r\n\r\n        switch (type) {\r\n            case 'algo':\r\n                document.getElementById(`grid-popout`).classList.remove(\"active\");\r\n                document.getElementById(`grid-btn`).classList.remove(\"active\");\r\n                break;\r\n            case 'grid':\r\n                document.getElementById(`algo-popout`).classList.remove(\"active\");\r\n                document.getElementById(`algo-btn`).classList.remove(\"active\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    runVisualizer() {\r\n        if (!this.state.selectedAlgorithm) {\r\n            this.setState({ btnErrorMessage: 'Pick an algorithm!' })\r\n        } else {\r\n            this.props.visualizeAlgorithm(this.state.selectedAlgorithm);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { visualizeDijkstra,\r\n                generateGrid,\r\n                generateSidewinderGrid,\r\n                clearGrid } = this.props;\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"nav-logo\">\r\n                        Pathfinding visualizer\r\n                    </div>\r\n                    <div className=\"nav-btns\">\r\n                        <div className=\"btns-left\">\r\n                            <button onClick={ () => this.handlePopout('algo') } id=\"algo-btn\">Pick an algorithm\r\n                                <div className=\"popout algo-popout\" id=\"algo-popout\">\r\n                                    <button onClick={ () => this.setState({ selectedAlgorithm: 'dijkstra', btnErrorMessage: '' })\r\n                                        }>Dijkstra</button>\r\n                                    <button>Dijkstra</button>\r\n                                    <button>Dijkstra</button>\r\n                                    <button>Dijkstra</button>\r\n                                </div>\r\n                            </button>\r\n                            <button onClick={ ()=> this.handlePopout('grid') } id=\"grid-btn\">Mazes & Patterns\r\n                                <div className=\"popout grid-popout\" id=\"grid-popout\">\r\n                                    <button onClick={ () => generateGrid() }>Simple grid</button>\r\n                                    <a onClick={ () => generateSidewinderGrid() }>Sidewinder Grid</a>\r\n                                </div>\r\n                            </button>\r\n                            <button>Add bomb</button>\r\n                        </div>\r\n                        <div className=\"btns-middle\">\r\n                            <button onClick={ () => this.runVisualizer() } className=\"cta\">\r\n                                { this.state.btnErrorMessage ? this.state.btnErrorMessage : `Visualize${ this.state.selectedAlgorithm ? ' ' : '' }${ this.state.selectedAlgorithm }!`\r\n                                }\r\n\r\n                                \r\n                            </button>\r\n                        </div>\r\n                        <div className=\"btns-right\">\r\n                            <button onClick={ () => clearGrid() }>Clear grid</button>\r\n                            <button>Clear path</button>\r\n                            <button>Speed: </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"nav-right\">\r\n                    Check me on github!\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\n\r\n// Algorightms\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\r\nimport { generateSimpleGrid, generateSidewinderGrid } from '../algorithms/gridAlgorithms'\r\n\r\n// CSS\r\nimport './PathfindingVisualizer.css'\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nconst START_NODE_ROW = 15;\r\nconst START_NODE_COL = 9;\r\nconst FINISH_NODE_ROW = 15;\r\nconst FINISH_NODE_COL = 29;\r\nconst GRID_WIDTH = 41;\r\nconst GRID_HEIGHT = 31;\r\n\r\nlet newGrid;\r\nlet isMouseDown = false;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            walls: []\r\n        };\r\n    }\r\n\r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }  \r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                \r\n                \r\n                //console.log(node.col, node.row, newGrid[node.col][node.row]);\r\n                \r\n            }, 10 * i)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-path'\r\n            }, i * 10)\r\n        }\r\n    }\r\n\r\n    visualizeAlgorithm(algoType) {\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        let visitedNodesInOrder;\r\n        switch (algoType) {\r\n            case 'dijkstra':\r\n                visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n        \r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        console.log(visitedNodesInOrder);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        setMouseState(true);\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n       // console.log(row, col);\r\n        \r\n        this.setState({\r\n            mouseIsPressed: true\r\n        })\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return false;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);        \r\n    }\r\n\r\n    clearGrid() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });        \r\n        \r\n        for (let row = 0; row < GRID_HEIGHT; row++) \r\n            for (let col = 0; col < GRID_WIDTH; col++) {\r\n                if (!(row === START_NODE_ROW && col === START_NODE_COL) && !(row === FINISH_NODE_ROW && col === FINISH_NODE_COL)) {\r\n                    document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n                }\r\n            }\r\n        clearNewGrid();\r\n    }\r\n\r\n    animateWalls(walls) {\r\n        for (let i = 0; i < walls.length; i++) {\r\n            let node = walls[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall is-animated';\r\n                \r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall';\r\n                }, 1500)\r\n            }, i * 15)\r\n        }\r\n    }\r\n\r\n    generateGrid(gridType) {\r\n        this.clearGrid();\r\n        const { grid } = this.state;\r\n        const { newGrid, walls } = generateSimpleGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n        this.animateWalls(walls);\r\n        //console.log(walls);\r\n        \r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n\r\n         //this.setState({ grid: newGrid })\r\n    }\r\n\r\n    generateSidewinderGrid() {\r\n        this.clearGrid();\r\n        const { grid } = this.state;\r\n        const { newGrid, walls } = generateSidewinderGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n\r\n        this.animateWalls(walls);\r\n\r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n    }\r\n\r\n    handleMouseUp() {\r\n        setMouseState(false);\r\n        console.log('The mouse is up!');\r\n        \r\n        this.setState({\r\n            mouseIsPressed: false\r\n        })\r\n        const updatedGrid = getGrid();\r\n        this.setState({ grid: updatedGrid })\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {/* <button onClick={ () => this.visualizeDijkstra() }>Visualize Dijkstras algorithm!</button>\r\n                <button onClick={ () => this.clearGrid() }>Clear grid</button>\r\n                <button onClick={ () => this.generateGrid() }>Generate grid</button>\r\n                <button onClick={ () => this.generateSidewinderGrid() }>Generate sidewinder grid</button> */}\r\n                <Navbar visualizeAlgorithm={ (algoType) => this.visualizeAlgorithm(algoType) }\r\n                        generateGrid={ () => this.generateGrid() }\r\n                        generateSidewinderGrid={ () => this.generateSidewinderGrid() }\r\n                        clearGrid={ () => this.clearGrid() }></Navbar>\r\n                <div className=\"grid\">\r\n                    {\r\n                        grid.map((row, rowInd) => {\r\n                            return (\r\n                                <div key={ Math.random() } className=\"row\">\r\n                                    {\r\n                                        row.map((node, nodeInd) => {\r\n                                            const { isStart, isFinish, row, col, isWall, isVisited } = node;\r\n                                            \r\n                                            return (\r\n                                                <Node key={ Math.random() }\r\n                                                    isStart={ isStart }\r\n                                                    isWall={ isWall }\r\n                                                    isFinish={ isFinish }\r\n                                                    isVisited={ isVisited }\r\n                                                    mouseIsPressed = { mouseIsPressed }\r\n                                                    onMouseDown={ (row, col) => this.handleMouseDown(row, col) }\r\n                                                    onMouseEnter={ (row, col) => this.handleMouseEnter(row, col) }\r\n                                                    onMouseUp={ () => this.handleMouseUp() }\r\n                                                    row={ row }\r\n                                                    col={ col }>\r\n                                                </Node>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < GRID_WIDTH; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isWeighted: false,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    console.log(isMouseDown);\r\n    \r\n    if (!isMouseDown) return;\r\n    if (node.isWall) \r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n    else {\r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall';\r\n    }\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    //console.log(newNode.isWall);\r\n    \r\n    newGrid[row][col] = newNode;\r\n    //document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall'\r\n    return newGrid;\r\n}\r\n\r\nconst getGrid = () => {\r\n    return newGrid;\r\n}\r\n\r\nconst clearNewGrid = () => {\r\n    newGrid = [];\r\n}\r\n\r\nconst setMouseState = (state) => {\r\n    isMouseDown = state\r\n} \r\n","import React from 'react';\n\nimport './App.css'\n\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}