{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/middleware.js","algorithms/gridAlgorithms.js","PathfindingVisualizer/Navbar/Navbar.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/dijkstra.js","algorithms/astar.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","sortNodesByDistanceForAstar","Infinity","hN","getDistanceToFinishNode","node","finishNode","console","log","Math","abs","updateUnvisitedNeighborsForAstar","grid","neighbors","getUnvisitedNeighbors","neighbor","gN","previousNode","updateUnvisitedNeighborsForDijkstra","push","length","filter","getAllNodes","nodes","prepareGrid","width","height","walls","nodeLeft","nodeRight","nodeTop","nodeBottom","newGrid","Navbar","selectedAlgorithm","btnErrorMessage","selectedSpeed","type","document","getElementById","classList","toggle","remove","speed","setState","setAlgoSpeed","visualizeAlgorithm","generateGrid","generateSidewinderGrid","clearGrid","clearPath","onClick","handlePopout","runVisualizer","setSpeed","isMouseDown","PathfindingVisualizer","mouseIsPressed","visitedNodes","visitedNodesInOrder","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","algoType","prepareGridForAlgorithm","getGrid","startNode","closestNode","shift","dijkstra","astar","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","getInitialGrid","setMouseState","getNewGridWithWallToggled","clearNewGrid","gridType","randomChoice","ceil","random","generateSimpleGrid","GRID_WIDTH","GRID_HEIGHT","animateWalls","setNewGridState","setStart","selectedColumn","updatedGrid","speedValue","onMouseOver","handleMouseUp","map","rowInd","key","nodeInd","handleMouseDown","handleMouseEnter","currentRow","createNode","isWeighted","slice","newNode","x1","y1","x2","y2","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b33b670e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Node.css'\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isVisited,\r\n            row,\r\n        } = this.props;\r\n        const extraClassName = isFinish ? 'node-finish' :\r\n                               isStart ?  'node-start':\r\n                               isWall ? 'node-wall' :\r\n                               isVisited ? 'node-visited' : '';\r\n        //console.log(isVisited, extraClassName);\r\n        \r\n\r\n        return (\r\n            <div id={`node-${row}-${col}`}\r\n                 className={ `node ${ extraClassName }` }\r\n                 onMouseDown={ () => onMouseDown(row, col) }\r\n                 onMouseEnter={ () => onMouseEnter(row, col) }\r\n                 onMouseUp={ () => onMouseUp() }>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction sortNodesByDistanceForAstar(unvisitedNodes) {\r\n    // let currentClosest, index;\r\n    // for (let i = 0; i < unvisitedNodes.length; i++) {\r\n    //     if (!currentClosest || currentClosest.distance > nodes[unvisitedNodes[i]].distance) {\r\n    //     currentClosest = nodes[unvisitedNodes[i]];\r\n    //     index = i;\r\n    //     } else if (currentClosest.distance === nodes[unvisitedNodes[i]].distance) {\r\n    //     if (currentClosest.gN > nodes[unvisitedNodes[i]].gN) {\r\n    //         currentClosest = nodes[unvisitedNodes[i]];\r\n    //         index = i;\r\n    //     }\r\n    //     }\r\n    // }\r\n    // unvisitedNodes.splice(index, 1);\r\n    // return currentClosest;\r\n\r\n    unvisitedNodes.sort((nodeA, nodeB) => {\r\n        \r\n        if (nodeA.distance == nodeB.distance && nodeA.distance !== Infinity) {\r\n            return nodeA.hN - nodeB.hN;\r\n        }\r\n        else \r\n            return nodeA.distance - nodeB.distance;\r\n    });\r\n}\r\n\r\nfunction getDistanceToFinishNode(node, finishNode) {\r\n    console.log(finishNode, node);\r\n    \r\n    return Math.abs(finishNode.col - node.col) + Math.abs(finishNode.row - node.row);\r\n}\r\n\r\nfunction updateUnvisitedNeighborsForAstar(node, grid, finishNode) {\r\n    let neighbors = getUnvisitedNeighbors(node, grid);\r\n    \r\n    for (const neighbor of neighbors) {\r\n        neighbor.gN = node.gN + 1;\r\n        neighbor.hN = getDistanceToFinishNode(neighbor, finishNode);\r\n        neighbor.distance = neighbor.gN + neighbor.hN;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighborsForDijkstra(node, grid, finishNode) {\r\n    const neighbors = getUnvisitedNeighbors(node, grid);\r\n    \r\n    for (const neighbor of neighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n        grid[neighbor.row][neighbor.col] = neighbor;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) \r\n        for (const node of row) \r\n            nodes.push(node);\r\n    return nodes;\r\n}\r\n\r\nexport {\r\n    sortNodesByDistance,\r\n    sortNodesByDistanceForAstar,\r\n    getDistanceToFinishNode,\r\n    updateUnvisitedNeighborsForAstar,\r\n    updateUnvisitedNeighborsForDijkstra,\r\n    getUnvisitedNeighbors,\r\n    getAllNodes\r\n};\r\n\r\n// exports.sortNodesByDistance = sortNodesByDistance;\r\n// exports.getDistanceToFinishNode = getDistanceToFinishNode;\r\n// exports.updateUnvisitedNeighbors = updateUnvisitedNeighbors;\r\n// exports.getUnvisitedNeighbors = getUnvisitedNeighbors;\r\n// exports.getAllNodes = getAllNodes;","export function generateSimpleGrid(grid, width, height) {\r\n    // Array for visualizing the creation of walls\r\n    //let walls = []\r\n\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;  \r\n\r\n    // Create random paths between cells\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            const randomChoice = Math.ceil(Math.random() * 10) % 2; \r\n            // 0 for top, 1 for right\r\n            if (row === 1 && col === width - 1) \r\n                continue;\r\n            if (row === 1 || randomChoice && col !== width - 1) {\r\n                const node = grid[row][col + 1];\r\n                node.isWall = false;\r\n                grid[row][col + 1] = node;\r\n                // walls.push(grid[row - 1][col]);\r\n            } else {\r\n                const node = grid[row - 1][col];\r\n                node.isWall = false;\r\n                grid[row - 1][col] = node;\r\n                // walls.push(grid[row][col + 1]);\r\n            }\r\n        }\r\n    }\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nexport function generateSidewinderGrid(grid, width, height) {\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;\r\n\r\n    let setStart = 1;\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            if (row !== 1) {\r\n                const randomChoice = Math.ceil(Math.random() * 10) % 2; // 0 or 1 only\r\n                if (!randomChoice && col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n                else {\r\n                    let selectedColumn = Math.ceil(Math.random() * (col - setStart + 1)) + setStart - 1;\r\n                    selectedColumn += selectedColumn % 2 === 0;\r\n                    console.log(selectedColumn);\r\n                    \r\n                    grid[row - 1][selectedColumn].isWall = false;\r\n\r\n                    if (col !== width - 1) \r\n                        setStart = col + 1;\r\n                    else \r\n                        setStart = 1;\r\n                }\r\n            } else {\r\n                if (col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nfunction prepareGrid(grid, width, height) {\r\n    let walls = [];\r\n\r\n    // Set walls around the grid\r\n    for (let row = 0; row <= height; row++) { \r\n        const nodeLeft = grid[row][0],\r\n            nodeRight = grid[row][width];\r\n        nodeLeft.isWall = true;\r\n        nodeRight.isWall = true;\r\n        grid[row][0] = nodeLeft;\r\n        grid[row][width] = nodeRight;\r\n        walls.push(grid[row][0]);\r\n        walls.push(grid[row][width]);\r\n    }\r\n    for (let col = 0; col <= width; col++) { \r\n        const nodeTop = grid[0][col],\r\n            nodeBottom = grid[height][col];\r\n        nodeTop.isWall = true;\r\n        nodeBottom.isWall = true;\r\n        grid[0][col] = nodeTop;\r\n        grid[height][col] = nodeBottom;\r\n        walls.push(grid[0][col]);\r\n        walls.push(grid[height][col]);\r\n    }\r\n\r\n    // Set all even cols and rows\r\n    for (let row = 2; row <= height; row += 2) \r\n        for (let col = 1; col <= width; col++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    for (let col = 2; col <= width; col += 2) \r\n        for (let row = 1; row <= height; row++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    \r\n    return { newGrid: grid, walls: walls };\r\n}","import React, { Component } from 'react'\r\n\r\nimport './Navbar.css'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedAlgorithm: '',\r\n            btnErrorMessage: '',\r\n            selectedSpeed: 'fast'\r\n        }\r\n    }\r\n\r\n    handlePopout(type) {\r\n        document.getElementById(`${ type }-popout`).classList.toggle(\"active\");\r\n        document.getElementById(`${ type }-btn`).classList.toggle(\"active\");\r\n\r\n        switch (type) {\r\n            case 'algo':\r\n                document.getElementById(`grid-popout`).classList.remove(\"active\");\r\n                document.getElementById(`grid-btn`).classList.remove(\"active\");\r\n                document.getElementById(`speed-btn`).classList.remove(\"active\");\r\n                document.getElementById(`speed-popout`).classList.remove(\"active\");\r\n                break;\r\n            case 'grid':\r\n                document.getElementById(`algo-popout`).classList.remove(\"active\");\r\n                document.getElementById(`algo-btn`).classList.remove(\"active\");\r\n                document.getElementById(`speed-btn`).classList.remove(\"active\");\r\n                document.getElementById(`speed-popout`).classList.remove(\"active\");\r\n                break;\r\n            case 'speed':\r\n                document.getElementById(`algo-popout`).classList.remove(\"active\");\r\n                document.getElementById(`algo-btn`).classList.remove(\"active\");\r\n                document.getElementById(`grid-popout`).classList.remove(\"active\");\r\n                document.getElementById(`grid-btn`).classList.remove(\"active\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedSpeed: speed\r\n        })\r\n        this.props.setAlgoSpeed(speed);\r\n    } \r\n\r\n    runVisualizer() {\r\n        if (!this.state.selectedAlgorithm) {\r\n            this.setState({ btnErrorMessage: 'Pick an algorithm!' })\r\n        } else {\r\n            this.props.visualizeAlgorithm(this.state.selectedAlgorithm);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { generateGrid,\r\n                generateSidewinderGrid,\r\n                clearGrid,\r\n                clearPath } = this.props;\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"nav-logo\">\r\n                        Pathfinding visualizer\r\n                    </div>\r\n                    <div className=\"nav-btns\">\r\n                        <div className=\"btns-left\">\r\n                            <button onClick={ () => this.handlePopout('algo') } id=\"algo-btn\">Pick an algorithm\r\n                                <div className=\"popout algo-popout\" id=\"algo-popout\">\r\n                                    <button onClick={ () => this.setState({ selectedAlgorithm: 'dijkstra', btnErrorMessage: '' })\r\n                                        }>Dijkstra</button>\r\n                                    <button onClick={ () => this.setState({ selectedAlgorithm: 'astar', btnErrorMessage: '' }) }>A*</button>\r\n                                    <button>Dijkstra</button>\r\n                                    <button>Dijkstra</button>\r\n                                </div>\r\n                            </button>\r\n                            <button onClick={ ()=> this.handlePopout('grid') } id=\"grid-btn\">Mazes & Patterns\r\n                                <div className=\"popout grid-popout\" id=\"grid-popout\">\r\n                                    <button onClick={ () => generateGrid() }>Simple grid</button>\r\n                                    <a onClick={ () => generateSidewinderGrid() }>Sidewinder Grid</a>\r\n                                </div>\r\n                            </button>\r\n                            <button>Add bomb</button>\r\n                        </div>\r\n                        <div className=\"btns-middle\" >\r\n                            <button onClick={ () => this.runVisualizer() } className=\"cta\">\r\n                                { this.state.btnErrorMessage ? this.state.btnErrorMessage : `Visualize${ this.state.selectedAlgorithm ? ' ' : '' }${ this.state.selectedAlgorithm }!`\r\n                                }\r\n\r\n                                \r\n                            </button>\r\n                        </div>\r\n                        <div className=\"btns-right\">\r\n                            <button onClick={ () => clearGrid() }>Clear grid</button>\r\n                            <button onClick={ () => clearPath() }>Clear path</button>\r\n                            <button onClick={ () => this.handlePopout('speed') } id=\"speed-btn\">Speed: { this.state.selectedSpeed }\r\n                                <div className=\"popout speed-popout\" id=\"speed-popout\">\r\n                                    <button onClick={ () => this.setSpeed('fast') }>Fast</button>\r\n                                    <button onClick={ () => this.setSpeed('medium') }>Medium</button>\r\n                                    <button onClick={ () => this.setSpeed('slow') }>Slow</button>\r\n                                </div>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"nav-right\">\r\n                    Check me on github!\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\n\r\n// Algorightms\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\r\nimport { generateSimpleGrid, generateSidewinderGrid } from '../algorithms/gridAlgorithms'\r\n\r\n// CSS\r\nimport './PathfindingVisualizer.css'\r\nimport Navbar from './Navbar/Navbar'\r\nimport { astar } from '../algorithms/astar'\r\n\r\nconst START_NODE_ROW = 15;\r\nconst START_NODE_COL = 9;\r\nconst FINISH_NODE_ROW = 15;\r\nconst FINISH_NODE_COL = 29;\r\nconst GRID_WIDTH = 41;\r\nconst GRID_HEIGHT = 31;\r\n\r\nlet newGrid = [];\r\nlet isMouseDown = false;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            walls: [],\r\n            visitedNodes: [],\r\n            speed: 10\r\n        };\r\n    }\r\n\r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        const speed = this.state.speed;\r\n        console.log(speed);\r\n        \r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, speed * i);\r\n                return;\r\n            }  \r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited is-animated';\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${node.row}-${node.col}`).classList.remove('is-animated');\r\n                }, 1500)\r\n                \r\n                \r\n                //console.log(node.col, node.row, newGrid[node.col][node.row]);\r\n                \r\n            }, speed * i)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-path'\r\n            }, i * this.state.speed)\r\n        }\r\n    }\r\n\r\n    visualizeAlgorithm(algoType) {\r\n        prepareGridForAlgorithm();\r\n        this.clearPath();\r\n        const grid = getGrid();\r\n        console.log(grid === getGrid(), '4454545');\r\n        \r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        let visitedNodesInOrder;\r\n        switch (algoType) {\r\n            case 'dijkstra':\r\n                visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n                break;\r\n            case 'astar':\r\n                visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n        \r\n            default:\r\n                break;\r\n        }\r\n\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        setMouseState(true);\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n       // console.log(row, col);\r\n        \r\n        this.setState({\r\n            mouseIsPressed: true\r\n        })\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return false;\r\n        if (row === START_NODE_ROW && col === START_NODE_COL ||\r\n            row === FINISH_NODE_ROW && col === FINISH_NODE_COL) return false;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);   \r\n    }\r\n\r\n    clearGrid() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid: grid });        \r\n        \r\n        for (let row = 0; row < GRID_HEIGHT; row++) \r\n            for (let col = 0; col < GRID_WIDTH; col++) {\r\n                if (!(row === START_NODE_ROW && col === START_NODE_COL) && !(row === FINISH_NODE_ROW && col === FINISH_NODE_COL)) {\r\n                    document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n                }\r\n            }\r\n        clearNewGrid();\r\n    }\r\n\r\n    animateWalls(walls) {\r\n        for (let i = 0; i < walls.length; i++) {\r\n            let node = walls[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall is-animated';\r\n                \r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall';\r\n                }, 1500)\r\n            }, i * 15)\r\n        }\r\n    }\r\n\r\n    clearPath() {\r\n        prepareGridForAlgorithm();\r\n        //this.setState({ grid: getGrid() });\r\n        for (let row = 0; row < GRID_HEIGHT; row++) {\r\n            for (let col = 0; col < GRID_WIDTH; col++) {\r\n                document.getElementById(`node-${ row }-${ col }`).classList.remove('node-visited');\r\n                document.getElementById(`node-${ row }-${ col }`).classList.remove('node-is-path');\r\n            }\r\n        }\r\n    }\r\n\r\n    generateGrid(gridType) {\r\n        prepareGridForAlgorithm();\r\n        this.clearGrid();\r\n        this.clearPath();\r\n        const grid = getInitialGrid();\r\n        const { newGrid, walls } = generateSimpleGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n        this.animateWalls(walls);\r\n        //console.log(walls);\r\n\r\n        setNewGridState(newGrid);\r\n        \r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n\r\n         //this.setState({ grid: newGrid })\r\n    }\r\n\r\n    generateSidewinderGrid() {\r\n        this.clearGrid();\r\n        this.clearPath();\r\n        const grid  = getInitialGrid();\r\n        const { newGrid, walls } = generateSidewinderGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n\r\n        this.animateWalls(walls);\r\n\r\n        setNewGridState(newGrid);\r\n\r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n    }\r\n\r\n    handleMouseUp() {\r\n        setMouseState(false);\r\n        console.log('The mouse is up!');\r\n        \r\n        this.setState({\r\n            mouseIsPressed: false\r\n        })\r\n        const updatedGrid = getGrid();\r\n        this.setState({ grid: updatedGrid })\r\n    }\r\n\r\n    setAlgoSpeed(speed) {\r\n        let speedValue;\r\n        if (speed === 'fast') speedValue = 10;\r\n            else if (speed === 'medium') speedValue = 15;\r\n                else speedValue = 20;\r\n        console.log(speedValue);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            speed: speedValue\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div onMouseOver={ () => {\r\n                    console.log('Hello!');\r\n                    \r\n                    if (mouseIsPressed) \r\n                        this.handleMouseUp();\r\n                    } } \r\n                    className=\"background\"></div>\r\n                <Navbar visualizeAlgorithm={ (algoType) => this.visualizeAlgorithm(algoType) }\r\n                        generateGrid={ () => this.generateGrid() }\r\n                        generateSidewinderGrid={ () => this.generateSidewinderGrid() }\r\n                        clearGrid={ () => this.clearGrid() }\r\n                        clearPath={ () => this.clearPath() }\r\n                        setAlgoSpeed={ (speed) => this.setAlgoSpeed(speed) }></Navbar>\r\n                <div className=\"grid\">\r\n                    {\r\n                        grid.map((row, rowInd) => {\r\n                            return (\r\n                                <div key={ Math.random() } className=\"row\">\r\n                                    {\r\n                                        row.map((node, nodeInd) => {\r\n                                            const { isStart, isFinish, row, col, isWall, isVisited } = node;\r\n                                            \r\n                                            return (\r\n                                                <Node key={ Math.random() }\r\n                                                    isStart={ isStart }\r\n                                                    isWall={ isWall }\r\n                                                    isFinish={ isFinish }\r\n                                                    isVisited={ isVisited }\r\n                                                    mouseIsPressed = { mouseIsPressed }\r\n                                                    onMouseDown={ (row, col) => this.handleMouseDown(row, col) }\r\n                                                    onMouseEnter={ (row, col) => this.handleMouseEnter(row, col) }\r\n                                                    onMouseUp={ () => this.handleMouseUp() }\r\n                                                    row={ row }\r\n                                                    col={ col }>\r\n                                                </Node>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < GRID_WIDTH; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    newGrid = grid;\r\n    console.log(newGrid);\r\n    \r\n    return grid;\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isWeighted: false,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        gN: Infinity,\r\n        hN: 0\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    //console.log(isMouseDown);\r\n    \r\n    if (!isMouseDown) return;\r\n    if (node.isWall) \r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n    else {\r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall';\r\n    }\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    //console.log(newNode.isWall);\r\n    \r\n    newGrid[row][col] = newNode;\r\n    //console.log(newGrid[row][col].isWall);\r\n    \r\n    //document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall'\r\n    return newGrid;\r\n}\r\n\r\nconst getDistance = (x1, y1, x2, y2) => {\r\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2);\r\n} \r\n\r\nconst prepareGridForAlgorithm = () => {    \r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n        for (let col = 0; col < GRID_WIDTH; col++) {\r\n            newGrid[row][col].isVisited = false;\r\n            newGrid[row][col].distance = Infinity;\r\n            newGrid[row][col].gN = Infinity;\r\n            newGrid[row][col].hN = getDistance(row, col, FINISH_NODE_ROW, FINISH_NODE_COL);\r\n            newGrid[row][col].previousNode = null;\r\n        }\r\n    }\r\n}\r\n\r\nconst getGrid = () => {\r\n    return newGrid;\r\n}\r\n\r\nconst clearNewGrid = () => {\r\n    newGrid = getInitialGrid();\r\n}\r\n\r\nconst setNewGridState = (grid) => {\r\n    newGrid = grid;\r\n}\r\n\r\nconst setMouseState = (state) => {\r\n    isMouseDown = state\r\n} \r\n","import { sortNodesByDistance, getAllNodes,  updateUnvisitedNeighborsForDijkstra } from './middleware';\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n        return false;\r\n    }\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // We skip the walls\r\n        if (closestNode.isWall) continue;\r\n        if (closestNode.distance === Infinity) \r\n            return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) \r\n            return visitedNodesInOrder;\r\n        updateUnvisitedNeighborsForDijkstra(closestNode, grid);\r\n    }\r\n}\r\n\r\n// Checking the shortest path\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { sortNodesByDistance, sortNodesByDistanceForAstar, getAllNodes,  updateUnvisitedNeighborsForAstar } from './middleware';\r\n\r\nexport function astar(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n        return false;\r\n    }\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    startNode.gN = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistanceForAstar(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // We skip the walls\r\n        if (closestNode.isWall) continue;\r\n        if (closestNode.distance === Infinity) \r\n            return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) \r\n            return visitedNodesInOrder;\r\n        updateUnvisitedNeighborsForAstar(closestNode, grid, finishNode);\r\n    }\r\n}\r\n\r\n// Checking the shortest path\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import React from 'react';\n\nimport './App.css'\n\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}