{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/gridAlgorithms.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","prepareGrid","width","height","walls","nodeLeft","nodeRight","nodeTop","nodeBottom","newGrid","isMouseDown","PathfindingVisualizer","mouseIsPressed","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","console","log","getInitialGrid","setState","setMouseState","getNewGridWithWallToggled","clearNewGrid","randomChoice","Math","ceil","random","generateSimpleGrid","GRID_WIDTH","GRID_HEIGHT","animateWalls","setStart","selectedColumn","generateSidewinderGrid","updatedGrid","getGrid","onClick","visualizeDijkstra","clearGrid","generateGrid","map","rowInd","key","nodeInd","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6914b619.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Node.css'\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isVisited,\r\n            row,\r\n        } = this.props;\r\n        const extraClassName = isFinish ? 'node-finish' :\r\n                               isStart ?  'node-start':\r\n                               isWall ? 'node-wall' :\r\n                               isVisited ? 'node-visited' : '';\r\n        //console.log(isVisited, extraClassName);\r\n        \r\n\r\n        return (\r\n            <div id={`node-${row}-${col}`}\r\n                 className={ `node ${ extraClassName }` }\r\n                 onMouseDown={ () => onMouseDown(row, col) }\r\n                 onMouseEnter={ () => onMouseEnter(row, col) }\r\n                 onMouseUp={ () => onMouseUp() }>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n        return false;\r\n    }\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // We skip the walls\r\n        if (closestNode.isWall) continue;\r\n        if (closestNode.distance === Infinity) \r\n            return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) \r\n            return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const neighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of neighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) \r\n        for (const node of row) \r\n            nodes.push(node);\r\n    return nodes;\r\n}\r\n\r\n// Checking the shortest path\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","export function generateSimpleGrid(grid, width, height) {\r\n    // Array for visualizing the creation of walls\r\n    //let walls = []\r\n\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;  \r\n\r\n    // Create random paths between cells\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            const randomChoice = Math.ceil(Math.random() * 10) % 2; \r\n            // 0 for top, 1 for right\r\n            if (row === 1 && col === width - 1) \r\n                continue;\r\n            if (row === 1 || randomChoice && col !== width - 1) {\r\n                const node = grid[row][col + 1];\r\n                node.isWall = false;\r\n                grid[row][col + 1] = node;\r\n                // walls.push(grid[row - 1][col]);\r\n            } else {\r\n                const node = grid[row - 1][col];\r\n                node.isWall = false;\r\n                grid[row - 1][col] = node;\r\n                // walls.push(grid[row][col + 1]);\r\n            }\r\n        }\r\n    }\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nexport function generateSidewinderGrid(grid, width, height) {\r\n    let { newGrid, walls } = prepareGrid(grid, width, height);\r\n    grid = newGrid;\r\n\r\n    let setStart = 1;\r\n    for (let row = 1; row < height; row += 2) {\r\n        for (let col = 1; col < width; col += 2) {\r\n            if (row !== 1) {\r\n                const randomChoice = Math.ceil(Math.random() * 10) % 2; // 0 or 1 only\r\n                if (!randomChoice && col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n                else {\r\n                    let selectedColumn = Math.ceil(Math.random() * (setStart - col + 1)) + col;\r\n                    selectedColumn += selectedColumn % 2 === 0;\r\n                    console.log(selectedColumn);\r\n                    \r\n                    grid[row - 1][selectedColumn].isWall = false;\r\n\r\n                    if (col !== width - 1) \r\n                        setStart = col + 1;\r\n                    else \r\n                        setStart = 1;\r\n                }\r\n            } else {\r\n                if (col !== width - 1) \r\n                    grid[row][col + 1].isWall = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let row = 1; row < height; row++)\r\n        for (let col = 1; col < width; col++) \r\n            if (grid[row][col].isWall)\r\n                walls.push(grid[row][col]);\r\n\r\n    return { newGrid: grid, walls: walls };\r\n}\r\n\r\nfunction prepareGrid(grid, width, height) {\r\n    let walls = [];\r\n\r\n    // Set walls around the grid\r\n    for (let row = 0; row <= height; row++) { \r\n        const nodeLeft = grid[row][0],\r\n            nodeRight = grid[row][width];\r\n        nodeLeft.isWall = true;\r\n        nodeRight.isWall = true;\r\n        grid[row][0] = nodeLeft;\r\n        grid[row][width] = nodeRight;\r\n        walls.push(grid[row][0]);\r\n        walls.push(grid[row][width]);\r\n    }\r\n    for (let col = 0; col <= width; col++) { \r\n        const nodeTop = grid[0][col],\r\n            nodeBottom = grid[height][col];\r\n        nodeTop.isWall = true;\r\n        nodeBottom.isWall = true;\r\n        grid[0][col] = nodeTop;\r\n        grid[height][col] = nodeBottom;\r\n        walls.push(grid[0][col]);\r\n        walls.push(grid[height][col]);\r\n    }\r\n\r\n    // Set all even cols and rows\r\n    for (let row = 2; row <= height; row += 2) \r\n        for (let col = 1; col <= width; col++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    for (let col = 2; col <= width; col += 2) \r\n        for (let row = 1; row <= height; row++) {\r\n            const node = grid[row][col];\r\n            node.isWall = true;\r\n            grid[row][col] = node;\r\n            //walls.push(node)\r\n        }\r\n    \r\n    return { newGrid: grid, walls: walls };\r\n}","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\n\r\n// Algorightms\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\r\nimport { generateSimpleGrid, generateSidewinderGrid } from '../algorithms/gridAlgorithms'\r\n\r\n// CSS\r\nimport './PathfindingVisualizer.css'\r\n\r\nconst START_NODE_ROW = 15;\r\nconst START_NODE_COL = 9;\r\nconst FINISH_NODE_ROW = 15;\r\nconst FINISH_NODE_COL = 29;\r\nconst GRID_WIDTH = 41;\r\nconst GRID_HEIGHT = 31;\r\n\r\nlet newGrid;\r\nlet isMouseDown = false;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            walls: []\r\n        };\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }  \r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                \r\n                \r\n                //console.log(node.col, node.row, newGrid[node.col][node.row]);\r\n                \r\n            }, 10 * i)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!(node.col === START_NODE_COL && node.row === START_NODE_ROW) && !(node.col === FINISH_NODE_COL && node.row === FINISH_NODE_ROW))\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-path'\r\n            }, i * 10)\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        console.log(visitedNodesInOrder);\r\n        \r\n    }\r\n\r\n    componentWillMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        setMouseState(true);\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n       // console.log(row, col);\r\n        \r\n        this.setState({\r\n            mouseIsPressed: true\r\n        })\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return false;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);        \r\n    }\r\n\r\n    clearGrid() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });        \r\n        \r\n        for (let row = 0; row < GRID_HEIGHT; row++) \r\n            for (let col = 0; col < GRID_WIDTH; col++) {\r\n                if (!(row === START_NODE_ROW && col === START_NODE_COL) && !(row === FINISH_NODE_ROW && col === FINISH_NODE_COL)) {\r\n                    document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n                }\r\n            }\r\n        clearNewGrid();\r\n    }\r\n\r\n    animateWalls(walls) {\r\n        for (let i = 0; i < walls.length; i++) {\r\n            let node = walls[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall is-animated';\r\n                \r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${ node.row }-${ node.col }`).className = 'node node-wall';\r\n                }, 1500)\r\n            }, i * 15)\r\n        }\r\n    }\r\n\r\n    generateGrid() {\r\n        const { grid } = this.state;\r\n        const { newGrid, walls } = generateSimpleGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n        this.animateWalls(walls);\r\n        //console.log(walls);\r\n        \r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n\r\n         //this.setState({ grid: newGrid })\r\n    }\r\n\r\n    generateSidewinderGrid() {\r\n        const { grid } = this.state;\r\n        const { newGrid, walls } = generateSidewinderGrid(grid, GRID_WIDTH - 1, GRID_HEIGHT - 1);\r\n\r\n        this.animateWalls(walls);\r\n\r\n        setTimeout(() => {\r\n            this.setState({ grid: newGrid })\r\n        }, walls.length * 15)\r\n    }\r\n\r\n    handleMouseUp() {\r\n        setMouseState(false);\r\n        console.log('The mouse is up!');\r\n        \r\n        this.setState({\r\n            mouseIsPressed: false\r\n        })\r\n        const updatedGrid = getGrid();\r\n        this.setState({ grid: updatedGrid })\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <button onClick={ () => this.visualizeDijkstra() }>Visualize Dijkstras algorithm!</button>\r\n                <button onClick={ () => this.clearGrid() }>Clear grid</button>\r\n                <button onClick={ () => this.generateGrid() }>Generate grid</button>\r\n                <button onClick={ () => this.generateSidewinderGrid() }>Generate sidewinder grid</button>\r\n                <div className=\"grid\">\r\n                    {\r\n                        grid.map((row, rowInd) => {\r\n                            return (\r\n                                <div key={ Math.random() } className=\"row\">\r\n                                    {\r\n                                        row.map((node, nodeInd) => {\r\n                                            const { isStart, isFinish, row, col, isWall, isVisited } = node;\r\n                                            \r\n                                            return (\r\n                                                <Node key={ Math.random() }\r\n                                                    isStart={ isStart }\r\n                                                    isWall={ isWall }\r\n                                                    isFinish={ isFinish }\r\n                                                    isVisited={ isVisited }\r\n                                                    mouseIsPressed = { mouseIsPressed }\r\n                                                    onMouseDown={ (row, col) => this.handleMouseDown(row, col) }\r\n                                                    onMouseEnter={ (row, col) => this.handleMouseEnter(row, col) }\r\n                                                    onMouseUp={ () => this.handleMouseUp() }\r\n                                                    row={ row }\r\n                                                    col={ col }>\r\n                                                </Node>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < GRID_WIDTH; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    console.log(isMouseDown);\r\n    \r\n    if (!isMouseDown) return;\r\n    if (node.isWall) \r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node';\r\n    else {\r\n        document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall';\r\n    }\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    //console.log(newNode.isWall);\r\n    \r\n    newGrid[row][col] = newNode;\r\n    //document.getElementById(`node-${ row }-${ col }`).className = 'node node-wall'\r\n    return newGrid;\r\n}\r\n\r\nconst getGrid = () => {\r\n    return newGrid;\r\n}\r\n\r\nconst clearNewGrid = () => {\r\n    newGrid = [];\r\n}\r\n\r\nconst setMouseState = (state) => {\r\n    isMouseDown = state\r\n} \r\n","import React from 'react';\n\nimport './App.css'\n\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}